{% comment %}
  Cart Drawer JavaScript functionality
  Extracted from cart-drawer.liquid section for reusability
{% endcomment %}

{% javascript %}
// Enhanced Cart Drawer JavaScript with Dawn/Focal/Prestige patterns
document.addEventListener('DOMContentLoaded', function() {
  const cartDrawer = document.querySelector('cart-drawer') || document.getElementById('cart-drawer');
  if (!cartDrawer) return;

  // Quantity control handlers for server-rendered content
  document.addEventListener('click', function(e) {
    if (e.target.closest('[data-cart-quantity-decrease]')) {
      const button = e.target.closest('[data-cart-quantity-decrease]');
      const input = button.parentElement.querySelector('[data-cart-quantity-input]');
      if (input) {
        const currentValue = parseInt(input.value);
        if (currentValue > 0) {
          input.value = currentValue - 1;
          input.dispatchEvent(new Event('change'));
        }
      }
    }
    
    if (e.target.closest('[data-cart-quantity-increase]')) {
      const button = e.target.closest('[data-cart-quantity-increase]');
      const input = button.parentElement.querySelector('[data-cart-quantity-input]');
      if (input) {
        const currentValue = parseInt(input.value);
        input.value = currentValue + 1;
        input.dispatchEvent(new Event('change'));
      }
    }
  });

  // Handle quantity input changes
  document.addEventListener('change', function(e) {
    if (e.target.hasAttribute('data-cart-quantity-input')) {
      const input = e.target;
      const line = parseInt(input.dataset.line);
      const quantity = parseInt(input.value);
      
      if (quantity >= 0) {
        // Update cart via AJAX
        window.cartUtils.updateCartItem(line, quantity).then(result => {
          if (result.success) {
            // Reload to show updated cart
            window.location.reload();
          } else {
            // Reset to original value on error
            input.value = input.getAttribute('data-original-value') || '1';
            alert('Failed to update quantity. Please try again.');
          }
        });
      }
    }
  });

  // Handle remove item buttons
  document.addEventListener('click', function(e) {
    if (e.target.closest('[data-cart-remove]')) {
      const button = e.target.closest('[data-cart-remove]');
      const line = parseInt(button.dataset.line);
      const originalText = button.innerHTML;
      
      button.disabled = true;
      button.innerHTML = 'Removing...';
      
      window.cartUtils.removeFromCart(line).then(result => {
        if (result.success) {
          // Reload to show updated cart
          window.location.reload();
        } else {
          button.disabled = false;
          button.innerHTML = originalText;
          alert('Failed to remove item. Please try again.');
        }
      });
    }
  });

  // Upsell add to cart handlers
  document.addEventListener('click', function(e) {
    if (e.target.closest('[data-product-id]')) {
      const button = e.target.closest('[data-product-id]');
      const productId = button.dataset.productId;
      const originalText = button.textContent;
      
      button.disabled = true;
      button.textContent = 'Adding...';
      
      window.cartUtils.addToCart(productId, 1).then(result => {
        if (result.success) {
          button.textContent = 'Added!';
          setTimeout(() => {
            button.disabled = false;
            button.textContent = originalText;
          }, 1500);
          
          // Refresh cart drawer
          const cartDrawerElement = document.querySelector('cart-drawer') || document.querySelector('#cart-drawer');
          if (cartDrawerElement && cartDrawerElement.render) {
            cartDrawerElement.render();
          } else if (cartDrawerElement) {
            // Fallback: reload the page to show updated cart
            window.location.reload();
          }
          
          window.cartUtils.updateCartCount();
        } else {
          button.disabled = false;
          button.textContent = 'Try Again';
          setTimeout(() => {
            button.textContent = originalText;
          }, 2000);
        }
      });
    }
  });

  // Cart note auto-save
  const cartNoteInput = document.querySelector('#cart-note');
  if (cartNoteInput) {
    let noteTimeout;
    cartNoteInput.addEventListener('input', function() {
      clearTimeout(noteTimeout);
      noteTimeout = setTimeout(() => {
        fetch('/cart/update.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            note: this.value
          })
        }).catch(error => {
          console.error('Failed to update cart note:', error);
        });
      }, 500);
    });
  }

  // Free shipping progress animation
  const shippingBarFill = document.querySelector('.cart-drawer__shipping-bar-fill');
  if (shippingBarFill) {
    // Trigger animation when drawer opens
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          if (cartDrawer.classList.contains('cart-drawer--open')) {
            // Reset and animate the progress bar
            shippingBarFill.style.width = '0%';
            setTimeout(() => {
              const targetWidth = shippingBarFill.style.getPropertyValue('--target-width') || '100%';
              shippingBarFill.style.width = targetWidth;
            }, 100);
          }
        }
      });
    });
    
    observer.observe(cartDrawer, { attributes: true });
  }

  // Enhanced accessibility
  document.addEventListener('keydown', function(e) {
    if (cartDrawer.classList.contains('cart-drawer--open')) {
      // Trap focus within drawer
      const focusableElements = cartDrawer.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );
      const firstElement = focusableElements[0];
      const lastElement = focusableElements[focusableElements.length - 1];

      if (e.key === 'Tab') {
        if (e.shiftKey) {
          if (document.activeElement === firstElement) {
            e.preventDefault();
            lastElement.focus();
          }
        } else {
          if (document.activeElement === lastElement) {
            e.preventDefault();
            firstElement.focus();
          }
        }
      }
    }
  });
});
{% endjavascript %}
