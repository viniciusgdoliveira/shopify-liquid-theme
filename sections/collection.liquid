{% comment %}
  Enhanced collection section with advanced filtering, sorting, and pagination.
  Features:
  - Advanced filtering (price, brand, color, size, rating)
  - Sorting options (price, popularity, newest, rating)
  - View toggle (grid/list)
  - Collection banner
  - Product count and filter management
  - AJAX filtering support
{% endcomment %}

{% liquid
  assign products_per_page = section.settings.products_per_page | default: 20
  assign show_collection_banner = section.settings.show_collection_banner
  assign show_collection_description = section.settings.show_collection_description
  assign show_sorting = section.settings.show_sorting
  assign show_filtering = section.settings.show_filtering
  assign show_view_toggle = section.settings.show_view_toggle
  assign show_product_count = section.settings.show_product_count
  assign default_view = section.settings.default_view | default: 'grid'
  assign columns_desktop = section.settings.columns_desktop | default: 4
  assign columns_mobile = section.settings.columns_mobile | default: 2
%}

<div class="collection collection--{{ default_view }} page-width">
  {% comment %} Breadcrumbs {% endcomment %}
  {% render 'breadcrumbs', collection: collection, class: 'collection__breadcrumbs' %}
  
  {% comment %} Collection Header {% endcomment %}
  <div class="collection__header">
    {% if show_collection_banner and collection.image %}
      <div class="collection__banner">
          {% render 'image',
          image: collection.image,
          class: 'collection__banner-image'
        %}
        <div class="collection__banner-content">
          <h1 class="collection__title">{{ collection.title | escape }}</h1>
          {% if show_collection_description and collection.description != blank %}
            <div class="collection__description rte">
              {{ collection.description }}
            </div>
          {% endif %}
        </div>
      </div>
    {% else %}
      <div class="collection__header-content">
        <h1 class="collection__title">{{ collection.title | escape }}</h1>
        {% if show_collection_description and collection.description != blank %}
          <div class="collection__description rte">
            {{ collection.description }}
          </div>
        {% endif %}
      </div>
    {% endif %}
  </div>

  {% comment %} Collection Controls {% endcomment %}
  <div class="collection__controls">
    <div class="collection__controls-left">
      {% if show_product_count %}
        <div class="collection__count">
          <span class="collection__count-text">
            {% if collection.products_count == 1 %}
              {{ 'collections.general.products_count.one' | t: count: collection.products_count }}
            {% else %}
              {{ 'collections.general.products_count.other' | t: count: collection.products_count }}
            {% endif %}
          </span>
        </div>
      {% endif %}
    </div>

    <div class="collection__controls-right">
      {% if show_sorting %}
        <div class="collection__sort">
          <label for="sort-by" class="collection__sort-label">{{ 'collections.general.sort_by' | t }}</label>
          <select id="sort-by" class="collection__sort-select" data-collection-sort>
            <option value="manual" {% if collection.sort_by == 'manual' %}selected{% endif %}>
              {{ 'collections.general.sort_by_manual' | t }}
            </option>
            <option value="best-selling" {% if collection.sort_by == 'best-selling' %}selected{% endif %}>
              {{ 'collections.general.sort_by_best_selling' | t }}
            </option>
            <option value="title-ascending" {% if collection.sort_by == 'title-ascending' %}selected{% endif %}>
              {{ 'collections.general.sort_by_title_ascending' | t }}
            </option>
            <option value="title-descending" {% if collection.sort_by == 'title-descending' %}selected{% endif %}>
              {{ 'collections.general.sort_by_title_descending' | t }}
            </option>
            <option value="price-ascending" {% if collection.sort_by == 'price-ascending' %}selected{% endif %}>
              {{ 'collections.general.sort_by_price_ascending' | t }}
            </option>
            <option value="price-descending" {% if collection.sort_by == 'price-descending' %}selected{% endif %}>
              {{ 'collections.general.sort_by_price_descending' | t }}
            </option>
            <option value="created-ascending" {% if collection.sort_by == 'created-ascending' %}selected{% endif %}>
              {{ 'collections.general.sort_by_created_ascending' | t }}
            </option>
            <option value="created-descending" {% if collection.sort_by == 'created-descending' %}selected{% endif %}>
              {{ 'collections.general.sort_by_created_descending' | t }}
            </option>
          </select>
        </div>
      {% endif %}

      {% if show_view_toggle %}
        <div class="collection__view-toggle">
          <button type="button" class="collection__view-btn collection__view-btn--grid{% if default_view == 'grid' %} active{% endif %}" data-view="grid" aria-label="{{ 'collections.general.view_grid' | t }}">
            {% render 'icons', icon: 'grid' %}
          </button>
          <button type="button" class="collection__view-btn collection__view-btn--list{% if default_view == 'list' %} active{% endif %}" data-view="list" aria-label="{{ 'collections.general.view_list' | t }}">
            {% render 'icons', icon: 'list' %}
          </button>
        </div>
      {% endif %}
    </div>
  </div>

  {% comment %} Collection Filters {% endcomment %}
  {% if show_filtering %}
    <div class="collection__filters" data-collection-filters>
      <div class="collection__filters-header">
        <h3 class="collection__filters-title">{{ 'collections.general.filter_by' | t }}</h3>
        <button type="button" class="collection__filters-clear" data-clear-filters>
          {{ 'collections.general.clear_all' | t }}
        </button>
      </div>
      
      <div class="collection__filters-content">
        {% comment %} Price Filter {% endcomment %}
        <div class="collection__filter-group">
          <h4 class="collection__filter-title">{{ 'collections.general.price' | t }}</h4>
          <div class="collection__filter-price" data-price-filter>
            <input type="range" class="collection__filter-price-range" min="0" max="1000" step="10" data-price-min>
            <input type="range" class="collection__filter-price-range" min="0" max="1000" step="10" data-price-max>
            <div class="collection__filter-price-display">
              <span data-price-min-display>$0</span> - <span data-price-max-display>$1000</span>
            </div>
          </div>
        </div>

        {% comment %} Brand Filter {% endcomment %}
        {% if collection.all_vendors.size > 1 %}
          <div class="collection__filter-group">
            <h4 class="collection__filter-title">{{ 'collections.general.brand' | t }}</h4>
            <div class="collection__filter-options" data-brand-filter>
              {% for vendor in collection.all_vendors %}
                <label class="collection__filter-option">
                  <input type="checkbox" value="{{ vendor | escape }}" data-filter="vendor">
                  <span class="collection__filter-option-text">{{ vendor | escape }}</span>
                </label>
              {% endfor %}
            </div>
          </div>
        {% endif %}

        {% comment %} Color Filter {% endcomment %}
        {% assign color_options = collection.all_tags | where: 'Color' %}
        {% if color_options.size > 0 %}
          <div class="collection__filter-group">
            <h4 class="collection__filter-title">{{ 'collections.general.color' | t }}</h4>
            <div class="collection__filter-options collection__filter-colors" data-color-filter>
              {% for color in color_options %}
                {% assign color_name = color | remove: 'Color_' | downcase %}
                <label class="collection__filter-option collection__filter-color">
                  <input type="checkbox" value="{{ color | escape }}" data-filter="color">
                  <span class="collection__filter-color-swatch" style="background-color: {{ color_name }};" data-color="{{ color_name }}"></span>
                  <span class="collection__filter-option-text">{{ color | remove: 'Color_' | capitalize }}</span>
                </label>
              {% endfor %}
            </div>
          </div>
        {% endif %}

        {% comment %} Size Filter {% endcomment %}
        {% assign size_options = collection.all_tags | where: 'Size' %}
        {% if size_options.size > 0 %}
          <div class="collection__filter-group">
            <h4 class="collection__filter-title">{{ 'collections.general.size' | t }}</h4>
            <div class="collection__filter-options collection__filter-sizes" data-size-filter>
              {% for size in size_options %}
                <label class="collection__filter-option collection__filter-size">
                  <input type="checkbox" value="{{ size | escape }}" data-filter="size">
                  <span class="collection__filter-option-text">{{ size | remove: 'Size_' }}</span>
                </label>
              {% endfor %}
            </div>
          </div>
        {% endif %}

        {% comment %} Availability Filter {% endcomment %}
        <div class="collection__filter-group">
          <h4 class="collection__filter-title">{{ 'collections.general.availability' | t }}</h4>
          <div class="collection__filter-options" data-availability-filter>
            <label class="collection__filter-option">
              <input type="checkbox" value="in_stock" data-filter="availability">
              <span class="collection__filter-option-text">{{ 'collections.general.in_stock' | t }}</span>
            </label>
            <label class="collection__filter-option">
              <input type="checkbox" value="on_sale" data-filter="availability">
              <span class="collection__filter-option-text">{{ 'collections.general.on_sale' | t }}</span>
            </label>
          </div>
        </div>
      </div>
    </div>
  {% endif %}

  {% comment %} Collection Products {% endcomment %}
  <div class="collection__products" data-collection-products>
    {% paginate collection.products by products_per_page %}
      <div class="collection__products-grid collection__products-grid--{{ columns_desktop }}-col collection__products-grid--mobile-{{ columns_mobile }}-col">
        {% for product in collection.products %}
          <div class="collection__product" data-product-id="{{ product.id }}">
            <div class="collection__product-card">
              {% if product.featured_image %}
                <div class="collection__product-image">
                  <a href="{{ product.url }}" class="collection__product-link">
                    {% render 'image',
                      image: product.featured_image,
                      class: 'collection__product-img',
                      width: 400,
                      height: 400,
                      crop: 'center'
                    %}
                  </a>
                  
                  {% if product.compare_at_price > product.price %}
                    <div class="collection__product-badge collection__product-badge--sale">
                      Sale
                    </div>
                  {% endif %}
                  
                  {% comment %} Add NEW badge for new products {% endcomment %}
                  {% assign product_age = product.created_at | date: '%s' %}
                  {% assign current_time = 'now' | date: '%s' %}
                  {% assign age_in_days = current_time | minus: product_age | divided_by: 86400 %}
                  {% if age_in_days <= 30 %}
                    <div class="collection__product-badge collection__product-badge--new">
                      NEW
                    </div>
                  {% endif %}
                  
                  {% comment %} Add BESTSELLER badge {% endcomment %}
                  {% if product.tags contains 'bestseller' %}
                    <div class="collection__product-badge collection__product-badge--bestseller">
                      BESTSELLER
                    </div>
                  {% endif %}
                  
                  {% if section.settings.show_quick_add %}
                    <div class="collection__product-actions">
                      <button type="button" class="collection__product-quick-add" data-quick-add="{{ product.id }}">
                        {{ 'products.product.quick_add' | t }}
                      </button>
                      <button type="button" class="collection__product-quick-view" data-quick-view="{{ product.id }}">
                        {{ 'products.product.quick_view' | t }}
                      </button>
                    </div>
                  {% endif %}
                </div>
              {% endif %}

              <div class="collection__product-content">
                <h3 class="collection__product-title">
                  <a href="{{ product.url }}" class="collection__product-link">
                    {{ product.title | escape }}
                  </a>
                </h3>

                {% if section.settings.show_vendor and product.vendor %}
                  <div class="collection__product-vendor">
                    {{ product.vendor | escape }}
                  </div>
                {% endif %}

                <div class="collection__product-price">
                  {% if product.compare_at_price > product.price %}
                    <span class="collection__product-price--sale">
                      {{ product.price | money }}
                    </span>
                    <span class="collection__product-price--compare">
                      {{ product.compare_at_price | money }}
                    </span>
                  {% else %}
                    <span class="collection__product-price--regular">
                      {{ product.price | money }}
                    </span>
                  {% endif %}
                </div>

                {% if section.settings.show_rating and product.metafields.reviews.rating.value %}
                  <div class="collection__product-rating">
                    {% assign rating = product.metafields.reviews.rating.value %}
                    <div class="collection__product-stars">
                      {% for i in (1..5) %}
                        <span class="collection__product-star{% if i <= rating %} active{% endif %}">★</span>
                      {% endfor %}
                    </div>
                    <span class="collection__product-rating-count">
                      ({{ product.metafields.reviews.rating_count.value }})
                    </span>
                  </div>
                {% endif %}
              </div>
            </div>
          </div>
        {% else %}
          <div class="collection__empty">
            <h2 class="collection__empty-title">{{ 'collections.general.no_products' | t }}</h2>
            <p class="collection__empty-text">{{ 'collections.general.no_products_description' | t }}</p>
      </div>
    {% endfor %}
      </div>

      {% comment %} Enhanced Pagination {% endcomment %}
      {% if paginate.pages > 1 %}
        <div class="collection__pagination">
          <div class="collection__pagination-info">
            <span class="collection__pagination-text">
              {{ 'collections.general.pagination_info' | t: 
                current_page: paginate.current_page, 
                total_pages: paginate.pages,
                total_products: paginate.total 
              }}
            </span>
          </div>
          
          <div class="collection__pagination-controls">
            {% comment %} Previous Page {% endcomment %}
            {% if paginate.previous %}
              <a href="{{ paginate.previous.url }}" class="collection__pagination-btn collection__pagination-btn--prev" data-pagination="prev">
                {% render 'icons', icon: 'arrow-left' %}
                <span>{{ 'collections.general.previous' | t }}</span>
              </a>
            {% endif %}
            
            {% comment %} Page Numbers {% endcomment %}
            <div class="collection__pagination-numbers">
              {% for part in paginate.parts %}
                {% if part.is_link %}
                  <a href="{{ part.url }}" class="collection__pagination-number" data-page="{{ part.title }}">
                    {{ part.title }}
                  </a>
                {% elsif part.title == paginate.current_page %}
                  <span class="collection__pagination-number collection__pagination-number--current">
                    {{ part.title }}
                  </span>
                {% else %}
                  <span class="collection__pagination-number collection__pagination-number--dots">
                    {{ part.title }}
                  </span>
                {% endif %}
              {% endfor %}
            </div>
            
            {% comment %} Next Page {% endcomment %}
            {% if paginate.next %}
              <a href="{{ paginate.next.url }}" class="collection__pagination-btn collection__pagination-btn--next" data-pagination="next">
                <span>{{ 'collections.general.next' | t }}</span>
                {% render 'icons', icon: 'arrow-right' %}
              </a>
            {% endif %}
          </div>
          
          {% comment %} Load More Button {% endcomment %}
          {% if paginate.next %}
            <div class="collection__pagination-load-more">
              <button type="button" class="collection__load-more-btn" data-load-more="{{ paginate.next.url }}">
                <span class="collection__load-more-text">{{ 'collections.general.load_more' | t }}</span>
                <span class="collection__load-more-spinner" style="display: none;">
                  {% render 'icons', icon: 'spinner' %}
                </span>
              </button>
            </div>
          {% endif %}
        </div>
      {% endif %}
  {% endpaginate %}
  </div>
</div>

{% comment %} Quick View Modal {% endcomment %}
<div class="quick-view-modal" id="quick-view-modal" data-quick-view-modal>
  <div class="quick-view-modal__overlay" data-quick-view-close></div>
  <div class="quick-view-modal__content">
    <button type="button" class="quick-view-modal__close" data-quick-view-close aria-label="{{ 'products.product.close_modal' | t }}">
      <span>&times;</span>
    </button>
    <div class="quick-view-modal__body" data-quick-view-body>
      <!-- Product content will be loaded here -->
    </div>
  </div>
</div>

{% stylesheet %}
.collection {
  padding: 3rem 0;
  background: var(--color-background, #ffffff);
}

.collection__header {
  margin-bottom: 2rem;
}

.collection__banner {
  position: relative;
  height: 300px;
  overflow: hidden;
  border-radius: 0.5rem;
}

.collection__banner-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.collection__banner-content {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
  color: white;
  z-index: 2;
}

.collection__banner-content::before {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: rgba(0, 0, 0, 0.4);
  z-index: -1;
}

.collection__title {
  font-size: clamp(2rem, 4vw, 3rem);
  font-weight: 800;
  margin: 0 0 1rem 0;
  color: var(--color-text-primary, #000000);
  letter-spacing: -0.02em;
}

.collection__description {
  font-size: 1.125rem;
  line-height: 1.6;
  max-width: 600px;
  margin: 0 auto;
  color: var(--color-text-secondary, #6C6C6C);
}

.collection__controls {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 3rem;
  padding: 1.5rem 0;
  border-bottom: 1px solid var(--color-border-light, #F0F0F0);
}

.collection__controls-left,
.collection__controls-right {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.collection__count-text {
  font-weight: 600;
  color: var(--color-text-secondary);
}

.collection__sort {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.collection__sort-label {
  font-weight: 600;
  color: var(--color-text-primary);
}

.collection__sort-select {
  padding: 0.75rem 1rem;
  border: 1px solid var(--color-border-light, #F0F0F0);
  border-radius: 6px;
  background: var(--color-background, #ffffff);
  color: var(--color-text-primary, #000000);
  font-weight: 500;
  min-width: 180px;
}

.collection__view-toggle {
  display: flex;
  gap: 0.25rem;
}

.collection__view-btn {
  padding: 0.5rem;
  border: 1px solid var(--color-border);
  background: var(--color-background);
  cursor: pointer;
  transition: all 0.2s ease;
  border-radius: 0.25rem;
}

.collection__view-btn.active {
  background: var(--color-primary);
  color: var(--color-text-inverse);
  border-color: var(--color-primary);
}

.collection__filters {
  margin-bottom: 3rem;
  padding: 2rem;
  border: 1px solid var(--color-border-light, #F0F0F0);
  border-radius: 8px;
  background: var(--color-background, #ffffff);
}

.collection__filters-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.collection__filters-title {
  font-size: 1.25rem;
  font-weight: 700;
  margin: 0;
  color: var(--color-text-primary, #000000);
}

.collection__filters-clear {
  padding: 0.75rem 1.5rem;
  border: 1px solid var(--color-border-light, #F0F0F0);
  background: var(--color-background, #ffffff);
  color: var(--color-text-primary, #000000);
  cursor: pointer;
  border-radius: 6px;
  transition: all 0.2s ease;
  font-weight: 500;
}

.collection__filters-clear:hover {
  background: var(--color-background-secondary, #F5F5F5);
  border-color: var(--color-accent, #28A745);
  color: var(--color-accent, #28A745);
}

.collection__filters-content {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1.5rem;
}

.collection__filter-group {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.collection__filter-title {
  font-weight: 600;
  color: var(--color-text-primary);
  margin: 0;
}

.collection__filter-price {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.collection__filter-price-range {
  width: 100%;
}

.collection__filter-price-display {
  text-align: center;
  font-weight: 600;
  color: var(--color-text-secondary);
}

.collection__filter-options {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.collection__filter-option {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
}

.collection__filter-option input[type="checkbox"] {
  margin: 0;
}

.collection__filter-option-text {
  color: var(--color-text-primary);
}

.collection__filter-colors {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
  gap: 0.5rem;
}

.collection__filter-color {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem;
  border: 1px solid var(--color-border);
  border-radius: 0.25rem;
  cursor: pointer;
  transition: all 0.2s ease;
}

.collection__filter-color:hover {
  border-color: var(--color-primary);
}

.collection__filter-color-swatch {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  border: 2px solid var(--color-border);
  flex-shrink: 0;
}

.collection__filter-color input[type="checkbox"]:checked + .collection__filter-color-swatch {
  border-color: var(--color-primary);
  box-shadow: 0 0 0 2px var(--color-primary-light);
}

.collection__filter-sizes {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
  gap: 0.5rem;
}

.collection__filter-size {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem;
  border: 1px solid var(--color-border);
  border-radius: 0.25rem;
  cursor: pointer;
  transition: all 0.2s ease;
  text-align: center;
}

.collection__filter-size:hover {
  border-color: var(--color-primary);
}

.collection__filter-size input[type="checkbox"]:checked + .collection__filter-option-text {
  color: var(--color-primary);
  font-weight: 600;
}

.collection__products-grid {
  display: grid;
  gap: 2rem;
  margin-bottom: 3rem;
}

.collection__products-grid--4-col {
  grid-template-columns: repeat(4, 1fr);
}

.collection__products-grid--3-col {
  grid-template-columns: repeat(3, 1fr);
}

.collection__products-grid--2-col {
  grid-template-columns: repeat(2, 1fr);
}

.collection__products-grid--mobile-2-col {
  grid-template-columns: repeat(2, 1fr);
}

.collection__products-grid--mobile-1-col {
  grid-template-columns: 1fr;
}

.collection__product-card {
  border: none;
  border-radius: 0;
  overflow: hidden;
  transition: all 0.3s ease;
  background: var(--color-background, #ffffff);
  position: relative;
}

.collection__product-card:hover {
  box-shadow: none;
  transform: translateY(-4px);
}

.collection__product-image {
  position: relative;
  overflow: hidden;
}

.collection__product-img {
  width: 100%;
  height: 300px;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.collection__product-card:hover .collection__product-img {
  transform: scale(1.05);
}

.collection__product-badge {
  position: absolute;
  top: 1rem;
  left: 1rem;
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  color: var(--color-text-inverse, #ffffff);
}

.collection__product-badge--sale {
  background: var(--color-error, #DC3545);
}

.collection__product-badge--new {
  background: var(--color-accent, #28A745);
}

.collection__product-badge--bestseller {
  background: var(--color-primary, #000000);
}

.collection__product-actions {
  position: absolute;
  top: 0.5rem;
  right: 0.5rem;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.collection__product-card:hover .collection__product-actions {
  opacity: 1;
}

.collection__product-quick-add {
  padding: 0.5rem;
  border: none;
  background: var(--color-primary);
  color: var(--color-text-inverse);
  border-radius: 0.25rem;
  cursor: pointer;
  font-size: 0.875rem;
  font-weight: 600;
  transition: all 0.2s ease;
}

.collection__product-quick-add:hover {
  background: var(--color-primary-dark);
}

.collection__product-quick-view {
  padding: 0.5rem;
  border: none;
  background: var(--color-background);
  color: var(--color-text-primary);
  border-radius: 0.25rem;
  cursor: pointer;
  font-size: 0.875rem;
  font-weight: 600;
  transition: all 0.2s ease;
  margin-top: 0.25rem;
}

.collection__product-quick-view:hover {
  background: var(--color-background-secondary);
  color: var(--color-primary);
}

.collection__product-content {
  padding: 1.5rem 0;
  text-align: center;
}

.collection__product-title {
  font-size: 1rem;
  font-weight: 600;
  margin: 0 0 0.5rem 0;
  line-height: 1.4;
  color: var(--color-text-primary, #000000);
}

.collection__product-link {
  color: var(--color-text-primary);
  text-decoration: none;
}

.collection__product-link:hover {
  color: var(--color-accent, #28A745);
}

.collection__product-vendor {
  font-size: 0.875rem;
  color: var(--color-text-secondary);
  margin-bottom: 0.5rem;
}

.collection__product-price {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  margin-bottom: 0.5rem;
}

.collection__product-price--sale {
  color: var(--color-error, #DC3545);
  font-weight: 600;
}

.collection__product-price--compare {
  color: var(--color-text-secondary, #6C6C6C);
  text-decoration: line-through;
  font-size: 0.875rem;
}

.collection__product-price--regular {
  color: var(--color-text-primary, #000000);
  font-weight: 600;
}

.collection__product-rating {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.collection__product-stars {
  display: flex;
  gap: 0.125rem;
}

.collection__product-star {
  color: var(--color-border);
  font-size: 0.875rem;
}

.collection__product-star.active {
  color: var(--color-warning);
}

.collection__product-rating-count {
  font-size: 0.875rem;
  color: var(--color-text-secondary);
}

.collection__empty {
  text-align: center;
  padding: 4rem 2rem;
}

.collection__empty-title {
  font-size: 1.5rem;
  font-weight: 600;
  margin: 0 0 1rem 0;
  color: var(--color-text-primary);
}

.collection__empty-text {
  color: var(--color-text-secondary);
  margin: 0;
}

.collection__pagination {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2rem;
  margin-top: 4rem;
  padding: 3rem 0;
  border-top: 1px solid var(--color-border-light, #F0F0F0);
}

.collection__pagination-info {
  text-align: center;
}

.collection__pagination-text {
  color: var(--color-text-secondary);
  font-size: 0.875rem;
}

.collection__pagination-controls {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.collection__pagination-btn {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.875rem 1.5rem;
  border: 1px solid var(--color-border-light, #F0F0F0);
  border-radius: 6px;
  background: var(--color-background, #ffffff);
  color: var(--color-text-primary, #000000);
  text-decoration: none;
  font-weight: 500;
  transition: all 0.2s ease;
}

.collection__pagination-btn:hover {
  background: var(--color-background-secondary, #F5F5F5);
  border-color: var(--color-accent, #28A745);
  color: var(--color-accent, #28A745);
}

.collection__pagination-btn--prev {
  margin-right: 0.5rem;
}

.collection__pagination-btn--next {
  margin-left: 0.5rem;
}

.collection__pagination-numbers {
  display: flex;
  gap: 0.25rem;
}

.collection__pagination-number {
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 2.75rem;
  height: 2.75rem;
  padding: 0.5rem;
  border: 1px solid var(--color-border-light, #F0F0F0);
  border-radius: 6px;
  background: var(--color-background, #ffffff);
  color: var(--color-text-primary, #000000);
  text-decoration: none;
  font-weight: 500;
  transition: all 0.2s ease;
}

.collection__pagination-number:hover {
  background: var(--color-background-secondary, #F5F5F5);
  border-color: var(--color-accent, #28A745);
  color: var(--color-accent, #28A745);
}

.collection__pagination-number--current {
  background: var(--color-primary, #000000);
  color: var(--color-text-inverse, #ffffff);
  border-color: var(--color-primary, #000000);
}

.collection__pagination-number--dots {
  border: none;
  background: transparent;
  color: var(--color-text-secondary);
  cursor: default;
}

.collection__pagination-number--dots:hover {
  background: transparent;
  border: none;
  color: var(--color-text-secondary);
}

.collection__pagination-load-more {
  margin-top: 1rem;
}

.collection__load-more-btn {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 1rem 2rem;
  border: 2px solid var(--color-primary);
  border-radius: 0.5rem;
  background: var(--color-primary);
  color: var(--color-text-inverse);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
}

.collection__load-more-btn:hover {
  background: var(--color-primary-dark);
  border-color: var(--color-primary-dark);
}

.collection__load-more-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.collection__load-more-spinner {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Quick View Modal */
.quick-view-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1000;
  display: none;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.quick-view-modal.active {
  display: flex;
  opacity: 1;
}

.quick-view-modal__overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  cursor: pointer;
}

.quick-view-modal__content {
  position: relative;
  width: 90%;
  max-width: 800px;
  max-height: 90vh;
  margin: auto;
  background: var(--color-background);
  border-radius: 0.5rem;
  overflow: hidden;
  transform: scale(0.9);
  transition: transform 0.3s ease;
}

.quick-view-modal.active .quick-view-modal__content {
  transform: scale(1);
}

.quick-view-modal__close {
  position: absolute;
  top: 1rem;
  right: 1rem;
  width: 2rem;
  height: 2rem;
  border: none;
  background: var(--color-background);
  color: var(--color-text-primary);
  border-radius: 50%;
  cursor: pointer;
  font-size: 1.5rem;
  font-weight: bold;
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.quick-view-modal__close:hover {
  background: var(--color-background-secondary);
  color: var(--color-primary);
}

.quick-view-modal__body {
  padding: 2rem;
  max-height: 80vh;
  overflow-y: auto;
}

.quick-view-product {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 2rem;
  align-items: start;
}

.quick-view-product__image {
  position: relative;
}

.quick-view-product__image img {
  width: 100%;
  height: auto;
  border-radius: 0.5rem;
}

.quick-view-product__content {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.quick-view-product__title {
  font-size: 1.5rem;
  font-weight: 700;
  margin: 0;
  color: var(--color-text-primary);
}

.quick-view-product__price {
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--color-primary);
}

.quick-view-product__description {
  color: var(--color-text-secondary);
  line-height: 1.6;
}

.quick-view-product__form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.quick-view-product__variants {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.quick-view-product__variant-label {
  font-weight: 600;
  color: var(--color-text-primary);
}

.quick-view-product__variant-options {
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
}

.quick-view-product__variant-option {
  padding: 0.5rem 1rem;
  border: 1px solid var(--color-border);
  border-radius: 0.25rem;
  background: var(--color-background);
  color: var(--color-text-primary);
  cursor: pointer;
  transition: all 0.2s ease;
}

.quick-view-product__variant-option:hover {
  border-color: var(--color-primary);
  color: var(--color-primary);
}

.quick-view-product__variant-option.selected {
  background: var(--color-primary);
  color: var(--color-text-inverse);
  border-color: var(--color-primary);
}

.quick-view-product__quantity {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.quick-view-product__quantity-label {
  font-weight: 600;
  color: var(--color-text-primary);
}

.quick-view-product__quantity-input {
  display: flex;
  align-items: center;
  border: 1px solid var(--color-border);
  border-radius: 0.25rem;
  overflow: hidden;
}

.quick-view-product__quantity-btn {
  width: 2rem;
  height: 2rem;
  border: none;
  background: var(--color-background-secondary);
  color: var(--color-text-primary);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
}

.quick-view-product__quantity-btn:hover {
  background: var(--color-primary);
  color: var(--color-text-inverse);
}

.quick-view-product__quantity-value {
  width: 3rem;
  height: 2rem;
  border: none;
  text-align: center;
  font-weight: 600;
}

.quick-view-product__add-to-cart {
  padding: 1rem 2rem;
  border: none;
  background: var(--color-primary);
  color: var(--color-text-inverse);
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
}

.quick-view-product__add-to-cart:hover {
  background: var(--color-primary-dark);
}

.quick-view-product__add-to-cart:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Responsive Quick View */
@media screen and (max-width: 767px) {
  .quick-view-modal__content {
    width: 95%;
    max-height: 95vh;
  }
  
  .quick-view-modal__body {
    padding: 1rem;
  }
  
  .quick-view-product {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
  
  .quick-view-product__title {
    font-size: 1.25rem;
  }
}

/* Responsive Design */
@media screen and (max-width: 1023px) {
  .collection {
    padding: 2rem 0;
  }
  
  .collection__products-grid--4-col,
  .collection__products-grid--3-col {
    grid-template-columns: repeat(2, 1fr);
    gap: 1.5rem;
  }
  
  .collection__controls {
    flex-direction: column;
    gap: 1.5rem;
    align-items: stretch;
    margin-bottom: 2rem;
  }
  
  .collection__controls-left,
  .collection__controls-right {
    justify-content: space-between;
  }
  
  .collection__filters {
    padding: 1.5rem;
    margin-bottom: 2rem;
  }
  
  .collection__filters-content {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
  
  .collection__pagination-controls {
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .collection__pagination-numbers {
    order: -1;
    width: 100%;
    justify-content: center;
    margin-bottom: 1rem;
  }
}

@media screen and (max-width: 767px) {
  .collection {
    padding: 1.5rem 0;
  }
  
  .collection__products-grid--4-col,
  .collection__products-grid--3-col,
  .collection__products-grid--2-col {
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }
  
  .collection__title {
    font-size: clamp(1.5rem, 6vw, 2rem);
  }
  
  .collection__banner {
    height: 200px;
  }
  
  .collection__controls {
    padding: 1rem 0;
    margin-bottom: 1.5rem;
  }
  
  .collection__controls-right {
    flex-direction: column;
    gap: 1rem;
  }
  
  .collection__filters {
    padding: 1rem;
    margin-bottom: 1.5rem;
  }
  
  .collection__product-img {
    height: 250px;
  }
  
  .collection__product-content {
    padding: 1rem 0;
  }
}

@media screen and (max-width: 479px) {
  .collection__products-grid--4-col,
  .collection__products-grid--3-col,
  .collection__products-grid--2-col {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
  
  .collection__product-img {
    height: 300px;
  }
}
{% endstylesheet %}

{% javascript %}
class CollectionFilters extends HTMLElement {
  constructor() {
    super();
    this.productsContainer = document.querySelector('[data-collection-products]');
    this.sortSelect = document.querySelector('[data-collection-sort]');
    this.viewToggle = document.querySelectorAll('[data-view]');
    this.priceFilter = document.querySelector('[data-price-filter]');
    this.brandFilter = document.querySelector('[data-brand-filter]');
    this.colorFilter = document.querySelector('[data-color-filter]');
    this.sizeFilter = document.querySelector('[data-size-filter]');
    this.availabilityFilter = document.querySelector('[data-availability-filter]');
    this.clearFiltersBtn = document.querySelector('[data-clear-filters]');
    this.productCount = document.querySelector('.collection__count-text');
    
    this.currentFilters = {
      price: { min: 0, max: 1000 },
      brand: [],
      color: [],
      size: [],
      availability: []
    };
    
    this.init();
  }

  init() {
    if (this.sortSelect) {
      this.sortSelect.addEventListener('change', this.handleSort.bind(this));
    }

    if (this.viewToggle.length) {
      this.viewToggle.forEach(btn => {
        btn.addEventListener('click', this.handleViewToggle.bind(this));
      });
    }

    if (this.priceFilter) {
      this.initPriceFilter();
    }

    if (this.brandFilter) {
      this.initBrandFilter();
    }

    if (this.colorFilter) {
      this.initColorFilter();
    }

    if (this.sizeFilter) {
      this.initSizeFilter();
    }

    if (this.availabilityFilter) {
      this.initAvailabilityFilter();
    }

    if (this.clearFiltersBtn) {
      this.clearFiltersBtn.addEventListener('click', this.clearAllFilters.bind(this));
    }

    // Initialize URL state
    this.initURLState();
    
    // Initialize load more functionality
    this.initLoadMore();
    
    // Initialize quick view functionality
    this.initQuickView();
  }

  handleSort(event) {
    const sortValue = event.target.value;
    const url = new URL(window.location);
    url.searchParams.set('sort_by', sortValue);
    window.location.href = url.toString();
  }

  handleViewToggle(event) {
    const view = event.target.dataset.view;
    const productsGrid = document.querySelector('.collection__products-grid');
    
    // Update active button
    this.viewToggle.forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    
    // Update grid class
    productsGrid.className = productsGrid.className.replace(/collection__products-grid--(grid|list)/, '');
    productsGrid.classList.add(`collection__products-grid--${view}`);
    
    // Store preference
    localStorage.setItem('collection-view', view);
  }

  initPriceFilter() {
    const minRange = this.priceFilter.querySelector('[data-price-min]');
    const maxRange = this.priceFilter.querySelector('[data-price-max]');
    const minDisplay = this.priceFilter.querySelector('[data-price-min-display]');
    const maxDisplay = this.priceFilter.querySelector('[data-price-max-display]');

    if (minRange && maxRange && minDisplay && maxDisplay) {
      minRange.addEventListener('input', () => {
        minDisplay.textContent = `$${minRange.value}`;
        this.applyFilters();
      });

      maxRange.addEventListener('input', () => {
        maxDisplay.textContent = `$${maxRange.value}`;
        this.applyFilters();
      });
    }
  }

  initBrandFilter() {
    const checkboxes = this.brandFilter.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', this.applyFilters.bind(this));
    });
  }

  initColorFilter() {
    const checkboxes = this.colorFilter.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', this.applyFilters.bind(this));
    });
  }

  initSizeFilter() {
    const checkboxes = this.sizeFilter.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', this.applyFilters.bind(this));
    });
  }

  initAvailabilityFilter() {
    const checkboxes = this.availabilityFilter.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', this.applyFilters.bind(this));
    });
  }

  applyFilters() {
    this.updateCurrentFilters();
    this.updateURL();
    this.performAJAXFilter();
  }

  updateCurrentFilters() {
    // Update price filter
    if (this.priceFilter) {
      const minRange = this.priceFilter.querySelector('[data-price-min]');
      const maxRange = this.priceFilter.querySelector('[data-price-max]');
      if (minRange && maxRange) {
        this.currentFilters.price.min = parseInt(minRange.value);
        this.currentFilters.price.max = parseInt(maxRange.value);
      }
    }

    // Update brand filter
    if (this.brandFilter) {
      const checkboxes = this.brandFilter.querySelectorAll('input[type="checkbox"]:checked');
      this.currentFilters.brand = Array.from(checkboxes).map(cb => cb.value);
    }

    // Update color filter
    if (this.colorFilter) {
      const checkboxes = this.colorFilter.querySelectorAll('input[type="checkbox"]:checked');
      this.currentFilters.color = Array.from(checkboxes).map(cb => cb.value);
    }

    // Update size filter
    if (this.sizeFilter) {
      const checkboxes = this.sizeFilter.querySelectorAll('input[type="checkbox"]:checked');
      this.currentFilters.size = Array.from(checkboxes).map(cb => cb.value);
    }

    // Update availability filter
    if (this.availabilityFilter) {
      const checkboxes = this.availabilityFilter.querySelectorAll('input[type="checkbox"]:checked');
      this.currentFilters.availability = Array.from(checkboxes).map(cb => cb.value);
    }
  }

  updateURL() {
    const url = new URL(window.location);
    
    // Clear existing filter params
    url.searchParams.delete('filter.v.price.gte');
    url.searchParams.delete('filter.v.price.lte');
    url.searchParams.delete('filter.v.vendor');
    url.searchParams.delete('filter.v.tag');
    
    // Add price filters
    if (this.currentFilters.price.min > 0) {
      url.searchParams.set('filter.v.price.gte', this.currentFilters.price.min * 100);
    }
    if (this.currentFilters.price.max < 1000) {
      url.searchParams.set('filter.v.price.lte', this.currentFilters.price.max * 100);
    }
    
    // Add brand filters
    this.currentFilters.brand.forEach(brand => {
      url.searchParams.append('filter.v.vendor', brand);
    });
    
    // Add color and size filters
    [...this.currentFilters.color, ...this.currentFilters.size].forEach(tag => {
      url.searchParams.append('filter.v.tag', tag);
    });
    
    // Update URL without page reload
    window.history.replaceState({}, '', url.toString());
  }

  async performAJAXFilter() {
    if (!this.productsContainer) return;
    
    // Show loading state
      this.productsContainer.style.opacity = '0.5';
    this.productsContainer.style.pointerEvents = 'none';
    
    try {
      const url = new URL(window.location);
      const response = await fetch(url.toString(), {
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
        }
      });
      
      if (response.ok) {
        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        
        // Update products container
        const newProductsContainer = doc.querySelector('[data-collection-products]');
        if (newProductsContainer) {
          this.productsContainer.innerHTML = newProductsContainer.innerHTML;
        }
        
        // Update product count
        const newProductCount = doc.querySelector('.collection__count-text');
        if (newProductCount && this.productCount) {
          this.productCount.textContent = newProductCount.textContent;
        }
        
        // Re-initialize quick add buttons
        this.reinitializeQuickAdd();
      }
    } catch (error) {
      console.error('Filter request failed:', error);
      // Fallback to page reload
      window.location.reload();
    } finally {
      // Hide loading state
        this.productsContainer.style.opacity = '1';
      this.productsContainer.style.pointerEvents = 'auto';
    }
  }

  initURLState() {
    const url = new URL(window.location);
    
    // Initialize price filters from URL
    const priceMin = url.searchParams.get('filter.v.price.gte');
    const priceMax = url.searchParams.get('filter.v.price.lte');
    
    if (this.priceFilter) {
      const minRange = this.priceFilter.querySelector('[data-price-min]');
      const maxRange = this.priceFilter.querySelector('[data-price-max]');
      const minDisplay = this.priceFilter.querySelector('[data-price-min-display]');
      const maxDisplay = this.priceFilter.querySelector('[data-price-max-display]');
      
      if (priceMin && minRange && minDisplay) {
        minRange.value = parseInt(priceMin) / 100;
        minDisplay.textContent = `$${minRange.value}`;
      }
      
      if (priceMax && maxRange && maxDisplay) {
        maxRange.value = parseInt(priceMax) / 100;
        maxDisplay.textContent = `$${maxRange.value}`;
      }
    }
    
    // Initialize brand filters from URL
    const brandFilters = url.searchParams.getAll('filter.v.vendor');
    if (this.brandFilter) {
      brandFilters.forEach(brand => {
        const checkbox = this.brandFilter.querySelector(`input[value="${brand}"]`);
        if (checkbox) checkbox.checked = true;
      });
    }
    
    // Initialize tag filters from URL
    const tagFilters = url.searchParams.getAll('filter.v.tag');
    if (this.colorFilter) {
      tagFilters.forEach(tag => {
        const checkbox = this.colorFilter.querySelector(`input[value="${tag}"]`);
        if (checkbox) checkbox.checked = true;
      });
    }
    
    if (this.sizeFilter) {
      tagFilters.forEach(tag => {
        const checkbox = this.sizeFilter.querySelector(`input[value="${tag}"]`);
        if (checkbox) checkbox.checked = true;
      });
    }
  }

  reinitializeQuickAdd() {
    const quickAddButtons = this.productsContainer.querySelectorAll('[data-quick-add]');
    quickAddButtons.forEach(button => {
      button.addEventListener('click', this.handleQuickAdd.bind(this));
    });
    
    // Re-initialize quick view buttons
    const quickViewButtons = this.productsContainer.querySelectorAll('[data-quick-view]');
    quickViewButtons.forEach(button => {
      button.addEventListener('click', this.handleQuickView.bind(this));
    });
  }

  initQuickView() {
    const quickViewButtons = document.querySelectorAll('[data-quick-view]');
    quickViewButtons.forEach(button => {
      button.addEventListener('click', this.handleQuickView.bind(this));
    });
    
    // Close modal handlers
    const closeButtons = document.querySelectorAll('[data-quick-view-close]');
    closeButtons.forEach(button => {
      button.addEventListener('click', this.closeQuickView.bind(this));
    });
    
    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        this.closeQuickView();
      }
    });
  }

  async handleQuickView(event) {
    const button = event.target.closest('[data-quick-view]');
    const productId = button.dataset.quickView;
    
    if (!productId) return;
    
    const modal = document.querySelector('[data-quick-view-modal]');
    const modalBody = document.querySelector('[data-quick-view-body]');
    
    // Show modal
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
    
    // Show loading state
    modalBody.innerHTML = '<div style="text-align: center; padding: 2rem;">Loading...</div>';
    
    try {
      // Fetch product data
      const response = await fetch(`/products/${productId}.js`);
      if (response.ok) {
        const product = await response.json();
        this.renderQuickViewProduct(product, modalBody);
      } else {
        throw new Error('Failed to fetch product');
      }
    } catch (error) {
      console.error('Quick view failed:', error);
      modalBody.innerHTML = '<div style="text-align: center; padding: 2rem; color: var(--color-error);">Failed to load product. Please try again.</div>';
    }
  }

  renderQuickViewProduct(product, container) {
    const selectedVariant = product.variants[0];
    const price = selectedVariant.price;
    const comparePrice = selectedVariant.compare_at_price;
    
    let variantsHtml = '';
    if (product.options.length > 1) {
      product.options.forEach((option, index) => {
        if (option.name !== 'Title') {
          variantsHtml += `
            <div class="quick-view-product__variants">
              <label class="quick-view-product__variant-label">${option.name}</label>
              <div class="quick-view-product__variant-options" data-option-index="${index}">
                ${option.values.map(value => `
                  <button type="button" class="quick-view-product__variant-option" data-value="${value}">
                    ${value}
                  </button>
                `).join('')}
              </div>
            </div>
          `;
        }
      });
    }
    
    container.innerHTML = `
      <div class="quick-view-product">
        <div class="quick-view-product__image">
          <img src="${product.featured_image}" alt="${product.title}" />
        </div>
        <div class="quick-view-product__content">
          <h2 class="quick-view-product__title">${product.title}</h2>
          <div class="quick-view-product__price">
            ${comparePrice && comparePrice > price ? 
              `<span style="color: var(--color-sale);">$${(price / 100).toFixed(2)}</span> 
               <span style="text-decoration: line-through; color: var(--color-text-secondary); margin-left: 0.5rem;">$${(comparePrice / 100).toFixed(2)}</span>` :
              `$${(price / 100).toFixed(2)}`
            }
          </div>
          ${product.description ? `<div class="quick-view-product__description">${product.description}</div>` : ''}
          <form class="quick-view-product__form" data-product-form="${product.id}">
            ${variantsHtml}
            <div class="quick-view-product__quantity">
              <label class="quick-view-product__quantity-label">Quantity</label>
              <div class="quick-view-product__quantity-input">
                <button type="button" class="quick-view-product__quantity-btn" data-quantity-decrease>-</button>
                <input type="number" class="quick-view-product__quantity-value" value="1" min="1" data-quantity-input>
                <button type="button" class="quick-view-product__quantity-btn" data-quantity-increase>+</button>
              </div>
            </div>
            <button type="submit" class="quick-view-product__add-to-cart" ${!selectedVariant.available ? 'disabled' : ''}>
              ${selectedVariant.available ? 'Add to Cart' : 'Sold Out'}
            </button>
          </form>
        </div>
      </div>
    `;
    
    // Initialize variant selection and quantity controls
    this.initQuickViewControls(product);
  }

  initQuickViewControls(product) {
    const modalBody = document.querySelector('[data-quick-view-body]');
    
    // Variant selection
    const variantOptions = modalBody.querySelectorAll('.quick-view-product__variant-option');
    variantOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        const group = e.target.closest('.quick-view-product__variant-options');
        const siblings = group.querySelectorAll('.quick-view-product__variant-option');
        siblings.forEach(sibling => sibling.classList.remove('selected'));
        e.target.classList.add('selected');
        
        // Update price and availability (simplified)
        this.updateQuickViewVariant(product);
      });
    });
    
    // Quantity controls
    const decreaseBtn = modalBody.querySelector('[data-quantity-decrease]');
    const increaseBtn = modalBody.querySelector('[data-quantity-increase]');
    const quantityInput = modalBody.querySelector('[data-quantity-input]');
    
    decreaseBtn.addEventListener('click', () => {
      const currentValue = parseInt(quantityInput.value);
      if (currentValue > 1) {
        quantityInput.value = currentValue - 1;
      }
    });
    
    increaseBtn.addEventListener('click', () => {
      const currentValue = parseInt(quantityInput.value);
      quantityInput.value = currentValue + 1;
    });
    
    // Form submission
    const form = modalBody.querySelector('[data-product-form]');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      this.addToCartFromQuickView(product, parseInt(quantityInput.value));
    });
  }

  updateQuickViewVariant(product) {
    // Simplified variant update - in a real implementation, 
    // you'd calculate the correct variant based on selected options
    const selectedVariant = product.variants[0];
    const addToCartBtn = document.querySelector('.quick-view-product__add-to-cart');
    
    addToCartBtn.disabled = !selectedVariant.available;
    addToCartBtn.textContent = selectedVariant.available ? 'Add to Cart' : 'Sold Out';
  }

  async addToCartFromQuickView(product, quantity) {
    const addToCartBtn = document.querySelector('.quick-view-product__add-to-cart');
    const originalText = addToCartBtn.textContent;
    
    addToCartBtn.disabled = true;
    addToCartBtn.textContent = 'Adding...';
    
    try {
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: product.variants[0].id,
          quantity: quantity
        })
      });
      
      if (response.ok) {
        addToCartBtn.textContent = 'Added!';
        addToCartBtn.style.background = 'var(--color-success)';
        
        // Close modal after a delay
        setTimeout(() => {
          this.closeQuickView();
        }, 1500);
      } else {
        throw new Error('Failed to add to cart');
      }
    } catch (error) {
      console.error('Add to cart failed:', error);
      addToCartBtn.textContent = 'Error - Try Again';
      addToCartBtn.style.background = 'var(--color-error)';
    } finally {
      setTimeout(() => {
        addToCartBtn.disabled = false;
        addToCartBtn.textContent = originalText;
        addToCartBtn.style.background = 'var(--color-primary)';
      }, 2000);
    }
  }

  closeQuickView() {
    const modal = document.querySelector('[data-quick-view-modal]');
    modal.classList.remove('active');
    document.body.style.overflow = '';
  }

  initLoadMore() {
    const loadMoreBtn = document.querySelector('[data-load-more]');
    if (loadMoreBtn) {
      loadMoreBtn.addEventListener('click', this.handleLoadMore.bind(this));
    }
  }

  async handleLoadMore(event) {
    const button = event.target.closest('[data-load-more]');
    const nextUrl = button.dataset.loadMore;
    const loadMoreText = button.querySelector('.collection__load-more-text');
    const loadMoreSpinner = button.querySelector('.collection__load-more-spinner');
    
    if (!nextUrl) return;
    
    // Show loading state
    button.disabled = true;
    loadMoreText.style.display = 'none';
    loadMoreSpinner.style.display = 'inline-block';
    
    try {
      const response = await fetch(nextUrl, {
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
        }
      });
      
      if (response.ok) {
        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        
        // Get new products
        const newProducts = doc.querySelectorAll('.collection__product');
        const productsGrid = this.productsContainer.querySelector('.collection__products-grid');
        
        // Append new products
        newProducts.forEach(product => {
          productsGrid.appendChild(product);
        });
        
        // Update pagination
        const newPagination = doc.querySelector('.collection__pagination');
        const currentPagination = document.querySelector('.collection__pagination');
        
        if (newPagination && currentPagination) {
          currentPagination.innerHTML = newPagination.innerHTML;
          // Re-initialize load more button
          this.initLoadMore();
        }
        
        // Re-initialize quick add buttons for new products
        this.reinitializeQuickAdd();
        
        // Scroll to show new products
        const lastProduct = productsGrid.lastElementChild;
        if (lastProduct) {
          lastProduct.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
      }
    } catch (error) {
      console.error('Load more failed:', error);
      // Fallback to page navigation
      window.location.href = nextUrl;
    } finally {
      // Hide loading state
      button.disabled = false;
      loadMoreText.style.display = 'inline-block';
      loadMoreSpinner.style.display = 'none';
    }
  }

  clearAllFilters() {
    // Reset all filter inputs
    if (this.priceFilter) {
      const minRange = this.priceFilter.querySelector('[data-price-min]');
      const maxRange = this.priceFilter.querySelector('[data-price-max]');
      const minDisplay = this.priceFilter.querySelector('[data-price-min-display]');
      const maxDisplay = this.priceFilter.querySelector('[data-price-max-display]');
      
      if (minRange) minRange.value = minRange.min;
      if (maxRange) maxRange.value = maxRange.max;
      if (minDisplay) minDisplay.textContent = `$${minRange.min}`;
      if (maxDisplay) maxDisplay.textContent = `$${maxRange.max}`;
    }

    if (this.brandFilter) {
      const checkboxes = this.brandFilter.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach(checkbox => checkbox.checked = false);
    }

    if (this.colorFilter) {
      const checkboxes = this.colorFilter.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach(checkbox => checkbox.checked = false);
    }

    if (this.sizeFilter) {
      const checkboxes = this.sizeFilter.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach(checkbox => checkbox.checked = false);
    }

    if (this.availabilityFilter) {
      const checkboxes = this.availabilityFilter.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach(checkbox => checkbox.checked = false);
    }

    // Clear URL parameters
    const url = new URL(window.location);
    url.searchParams.delete('filter.v.price.gte');
    url.searchParams.delete('filter.v.price.lte');
    url.searchParams.delete('filter.v.vendor');
    url.searchParams.delete('filter.v.tag');
    window.history.replaceState({}, '', url.toString());

    this.applyFilters();
  }
}

customElements.define('collection-filters', CollectionFilters);

// Quick Add functionality
class QuickAdd extends HTMLElement {
  constructor() {
    super();
    this.addEventListener('click', this.handleQuickAdd.bind(this));
  }

  handleQuickAdd(event) {
    event.preventDefault();
    const productId = this.dataset.quickAdd;
    
    // Add to cart logic would go here
    console.log('Quick add product:', productId);
    
    // Show success message
    this.textContent = 'Added!';
    this.style.background = 'var(--color-success)';
    
    setTimeout(() => {
      this.textContent = 'Quick Add';
      this.style.background = 'var(--color-primary)';
    }, 2000);
  }
}

customElements.define('quick-add', QuickAdd);

// Initialize saved view preference
document.addEventListener('DOMContentLoaded', function() {
  const savedView = localStorage.getItem('collection-view');
  if (savedView) {
    const viewBtn = document.querySelector(`[data-view="${savedView}"]`);
    if (viewBtn) {
      viewBtn.click();
    }
  }
});
{% endjavascript %}

{% schema %}
{
  "name": "t:general.collection",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "header",
      "content": "Collection Display"
    },
    {
      "type": "range",
      "id": "products_per_page",
      "min": 12,
      "max": 48,
      "step": 4,
      "default": 20,
      "label": "Products per page"
    },
    {
      "type": "select",
      "id": "columns_desktop",
      "options": [
        {
          "value": "2",
          "label": "2 columns"
        },
        {
          "value": "3",
          "label": "3 columns"
        },
        {
          "value": "4",
          "label": "4 columns"
        }
      ],
      "default": "4",
      "label": "Desktop columns"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "options": [
        {
          "value": "1",
          "label": "1 column"
        },
        {
          "value": "2",
          "label": "2 columns"
        }
      ],
      "default": "2",
      "label": "Mobile columns"
    },
    {
      "type": "select",
      "id": "default_view",
      "options": [
        {
          "value": "grid",
          "label": "Grid view"
        },
        {
          "value": "list",
          "label": "List view"
        }
      ],
      "default": "grid",
      "label": "Default view"
    },
    {
      "type": "header",
      "content": "Collection Header"
    },
    {
      "type": "checkbox",
      "id": "show_collection_banner",
      "default": true,
      "label": "Show collection banner"
    },
    {
      "type": "checkbox",
      "id": "show_collection_description",
      "default": true,
      "label": "Show collection description"
    },
    {
      "type": "header",
      "content": "Collection Controls"
    },
    {
      "type": "checkbox",
      "id": "show_product_count",
      "default": true,
      "label": "Show product count"
    },
    {
      "type": "checkbox",
      "id": "show_sorting",
      "default": true,
      "label": "Show sorting options"
    },
    {
      "type": "checkbox",
      "id": "show_view_toggle",
      "default": true,
      "label": "Show view toggle"
    },
    {
      "type": "checkbox",
      "id": "show_filtering",
      "default": true,
      "label": "Show filtering options"
    },
    {
      "type": "header",
      "content": "Product Cards"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "Show vendor"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "default": true,
      "label": "Show product rating"
    },
    {
      "type": "checkbox",
      "id": "show_quick_add",
      "default": true,
      "label": "Show quick add button"
    }
  ],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}
