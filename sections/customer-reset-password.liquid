{% liquid
  assign section_id = section.settings.custom_id | default: section.id
  assign section_class = 'customer-reset-password'
%}

<div id="{{ section_id }}" class="{{ section_class }} page-width">
  <div class="customer-reset-password__wrapper">
    <div class="customer-reset-password__container">
      <div class="customer-reset-password__form-container">
        <div class="customer-reset-password__header">
          <h1 class="customer-reset-password__title">{{ 'customer.reset_password.title' | t }}</h1>
          <p class="customer-reset-password__subtitle">{{ 'customer.reset_password.subtitle' | t }}</p>
        </div>

        {% form 'reset_customer_password', class: 'customer-reset-password__form', novalidate: 'novalidate' %}
          {% if form.errors %}
            <div class="customer-reset-password__errors" role="alert">
              <h2 class="customer-reset-password__errors-title">{{ 'templates.contact.form.error_heading' | t }}</h2>
              <ul class="customer-reset-password__errors-list">
                {% for field in form.errors %}
                  <li class="customer-reset-password__errors-item">
                    {% if field == 'form' %}
                      {{ form.errors.messages[field] }}
                    {% else %}
                      <a href="#{{ field }}">{{ form.errors.translated_fields[field] | capitalize }} {{ form.errors.messages[field] }}</a>
                    {% endif %}
                  </li>
                {% endfor %}
              </ul>
            </div>
          {% endif %}

          {% if form.posted_successfully? %}
            <div class="customer-reset-password__success" role="status">
              <h2 class="customer-reset-password__success-title">{{ 'customer.reset_password.success_title' | t }}</h2>
              <p class="customer-reset-password__success-message">{{ 'customer.reset_password.success_message' | t }}</p>
            </div>
          {% endif %}

          <div class="customer-reset-password__field">
            <label for="ResetPassword" class="customer-reset-password__label">
              {{ 'customer.reset_password.password' | t }}
            </label>
            <input
              type="password"
              name="customer[password]"
              id="ResetPassword"
              class="customer-reset-password__input"
              required
              aria-describedby="{% if form.errors contains 'password' %}ResetPassword-error{% endif %}"
            >
            {% if form.errors contains 'password' %}
              <span id="ResetPassword-error" class="customer-reset-password__field-error">
                {{ form.errors.messages.password }}
              </span>
            {% endif %}
            {% if section.settings.show_password_requirements %}
              <div class="customer-reset-password__password-requirements">
                <p class="customer-reset-password__requirements-title">{{ 'customer.reset_password.requirements_title' | t }}</p>
                <ul class="customer-reset-password__requirements-list">
                  <li class="customer-reset-password__requirements-item" data-requirement="length">
                    {{ 'customer.reset_password.requirement_length' | t }}
                  </li>
                  <li class="customer-reset-password__requirements-item" data-requirement="uppercase">
                    {{ 'customer.reset_password.requirement_uppercase' | t }}
                  </li>
                  <li class="customer-reset-password__requirements-item" data-requirement="lowercase">
                    {{ 'customer.reset_password.requirement_lowercase' | t }}
                  </li>
                  <li class="customer-reset-password__requirements-item" data-requirement="number">
                    {{ 'customer.reset_password.requirement_number' | t }}
                  </li>
                </ul>
              </div>
            {% endif %}
          </div>

          <div class="customer-reset-password__field">
            <label for="PasswordConfirmation" class="customer-reset-password__label">
              {{ 'customer.reset_password.password_confirmation' | t }}
            </label>
            <input
              type="password"
              name="customer[password_confirmation]"
              id="PasswordConfirmation"
              class="customer-reset-password__input"
              required
              aria-describedby="{% if form.errors contains 'password_confirmation' %}PasswordConfirmation-error{% endif %}"
            >
            {% if form.errors contains 'password_confirmation' %}
              <span id="PasswordConfirmation-error" class="customer-reset-password__field-error">
                {{ form.errors.messages.password_confirmation }}
              </span>
            {% endif %}
          </div>

          <div class="customer-reset-password__actions">
            <button type="submit" class="btn btn--primary customer-reset-password__submit">
              {{ 'customer.reset_password.submit' | t }}
            </button>
          </div>
        {% endform %}

        {% if section.settings.show_login_link %}
          <div class="customer-reset-password__login">
            <p class="customer-reset-password__login-text">
              {{ 'customer.reset_password.remember_password' | t }}
            </p>
            <a href="{{ routes.account_login_url }}" class="btn btn--secondary">
              {{ 'customer.reset_password.back_to_login' | t }}
            </a>
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</div>

{% stylesheet %}
.customer-reset-password {
  padding: 4rem 0;
  min-height: 60vh;
  display: flex;
  align-items: center;
}

.customer-reset-password__wrapper {
  width: 100%;
}

.customer-reset-password__container {
  max-width: 500px;
  margin: 0 auto;
  padding: 0 1rem;
}

.customer-reset-password__header {
  text-align: center;
  margin-bottom: 2rem;
}

.customer-reset-password__title {
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
  color: var(--color-text-primary);
}

.customer-reset-password__subtitle {
  color: var(--color-text-secondary);
  margin: 0;
}

.customer-reset-password__form-container {
  background-color: var(--color-background);
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius-lg);
  padding: 2rem;
  margin-bottom: 2rem;
}

.customer-reset-password__form {
  display: grid;
  gap: 1.5rem;
}

.customer-reset-password__field {
  display: grid;
  gap: 0.5rem;
}

.customer-reset-password__label {
  font-weight: 500;
  color: var(--color-text-primary);
}

.customer-reset-password__input {
  padding: 0.75rem;
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius-md);
  background-color: var(--color-background);
  color: var(--color-text-primary);
  font-size: 1rem;
  transition: border-color 0.2s ease;
}

.customer-reset-password__input:focus {
  outline: none;
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px rgba(var(--color-primary-rgb), 0.1);
}

.customer-reset-password__input:invalid {
  border-color: var(--color-error);
}

.customer-reset-password__field-error {
  color: var(--color-error);
  font-size: 0.875rem;
}

.customer-reset-password__password-requirements {
  padding: 1rem;
  background-color: var(--color-background-secondary);
  border-radius: var(--border-radius-md);
  margin-top: 0.5rem;
}

.customer-reset-password__requirements-title {
  font-size: 0.875rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: var(--color-text-primary);
}

.customer-reset-password__requirements-list {
  list-style: none;
  margin: 0;
  padding: 0;
}

.customer-reset-password__requirements-item {
  padding: 0.25rem 0;
  font-size: 0.875rem;
  color: var(--color-text-secondary);
  position: relative;
  padding-left: 1.5rem;
}

.customer-reset-password__requirements-item::before {
  content: "○";
  position: absolute;
  left: 0;
  color: var(--color-text-secondary);
}

.customer-reset-password__requirements-item.valid::before {
  content: "✓";
  color: var(--color-success);
}

.customer-reset-password__actions {
  display: grid;
  gap: 1rem;
}

.customer-reset-password__submit {
  width: 100%;
  padding: 0.75rem 1.5rem;
  font-size: 1rem;
  font-weight: 600;
}

.customer-reset-password__login {
  text-align: center;
  padding: 1.5rem;
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius-lg);
  background-color: var(--color-background-secondary);
}

.customer-reset-password__login-text {
  margin-bottom: 1rem;
  color: var(--color-text-secondary);
}

.customer-reset-password__success {
  padding: 1.5rem;
  background-color: var(--color-success);
  color: white;
  border-radius: var(--border-radius-md);
  text-align: center;
  margin-bottom: 1.5rem;
}

.customer-reset-password__success-title {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
}

.customer-reset-password__success-message {
  margin: 0;
}

.customer-reset-password__errors {
  padding: 1rem;
  background-color: var(--color-error);
  color: white;
  border-radius: var(--border-radius-md);
  margin-bottom: 1.5rem;
}

.customer-reset-password__errors-title {
  font-size: 1rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
}

.customer-reset-password__errors-list {
  list-style: none;
  margin: 0;
  padding: 0;
}

.customer-reset-password__errors-item {
  margin-bottom: 0.25rem;
}

.customer-reset-password__errors-item a {
  color: white;
  text-decoration: underline;
}

/* Responsive Design */
@media screen and (max-width: 749px) {
  .customer-reset-password {
    padding: 2rem 0;
  }
  
  .customer-reset-password__form-container {
    padding: 1.5rem;
  }
  
  .customer-reset-password__login {
    padding: 1rem;
  }
}
{% endstylesheet %}

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  const form = document.querySelector('.customer-reset-password__form');
  const passwordInput = document.getElementById('ResetPassword');
  const confirmPasswordInput = document.getElementById('PasswordConfirmation');
  
  if (form && passwordInput && confirmPasswordInput) {
    // Password strength validation
    if (passwordInput) {
      passwordInput.addEventListener('input', function() {
        const password = this.value;
        const requirements = {
          length: password.length >= 8,
          uppercase: /[A-Z]/.test(password),
          lowercase: /[a-z]/.test(password),
          number: /\d/.test(password)
        };

        // Update requirement indicators
        Object.keys(requirements).forEach(requirement => {
          const element = document.querySelector(`[data-requirement="${requirement}"]`);
          if (element) {
            if (requirements[requirement]) {
              element.classList.add('valid');
            } else {
              element.classList.remove('valid');
            }
          }
        });
      });
    }

    // Password confirmation validation
    confirmPasswordInput.addEventListener('input', function() {
      if (this.value !== passwordInput.value) {
        this.classList.add('error');
        this.setCustomValidity('Passwords do not match');
      } else {
        this.classList.remove('error');
        this.setCustomValidity('');
      }
    });

    // Form submission validation
    form.addEventListener('submit', function(e) {
      const password = passwordInput.value;
      const confirmPassword = confirmPasswordInput.value;
      
      // Check password strength
      const requirements = {
        length: password.length >= 8,
        uppercase: /[A-Z]/.test(password),
        lowercase: /[a-z]/.test(password),
        number: /\d/.test(password)
      };

      const allRequirementsMet = Object.values(requirements).every(req => req);
      
      if (!allRequirementsMet) {
        e.preventDefault();
        passwordInput.classList.add('error');
        passwordInput.setCustomValidity('Password does not meet all requirements');
      } else {
        passwordInput.classList.remove('error');
        passwordInput.setCustomValidity('');
      }

      // Check password match
      if (password !== confirmPassword) {
        e.preventDefault();
        confirmPasswordInput.classList.add('error');
        confirmPasswordInput.setCustomValidity('Passwords do not match');
      } else {
        confirmPasswordInput.classList.remove('error');
        confirmPasswordInput.setCustomValidity('');
      }
    });
  }
});
{% endjavascript %}

{% schema %}
{
  "name": "Customer Reset Password",
  "tag": "section",
  "class": "customer-reset-password",
  "settings": [
    {
      "type": "header",
      "content": "Reset Password Options"
    },
    {
      "type": "checkbox",
      "id": "show_password_requirements",
      "label": "Show Password Requirements",
      "default": true,
      "info": "Display password strength requirements"
    },
    {
      "type": "checkbox",
      "id": "enable_password_strength",
      "label": "Enable Password Strength Indicator",
      "default": true,
      "info": "Show real-time password strength validation"
    },
    {
      "type": "checkbox",
      "id": "show_login_link",
      "label": "Show Login Link",
      "default": true,
      "info": "Display link back to login page"
    }
  ],
  "presets": [
    {
      "name": "Customer Reset Password"
    }
  ]
}
{% endschema %}
